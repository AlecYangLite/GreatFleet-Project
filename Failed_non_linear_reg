{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMuxSjVxpGIADSBWHZuYDC8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlecYangLite/GreatFleet-Project/blob/main/Failed_non_linear_reg\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U xgboost"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nNfoOl3u76fa",
        "outputId": "9abc6365-e39c-4482-f14e-b001cf7a8f1f"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.11/dist-packages (3.0.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.0.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.21.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from xgboost) (1.14.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb\n",
        "print(xgb.__version__)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zpSFCprH8kHe",
        "outputId": "89ecf284-0fec-47c6-90ae-96b296f3672b"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_MQraeoN7bvW",
        "outputId": "e4a8fe06-98ec-4496-c957-16bb13facb4f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0]\ttrain-rmse:263.31090\teval-rmse:840.50347\n",
            "[50]\ttrain-rmse:39.81940\teval-rmse:575.51135\n",
            "[100]\ttrain-rmse:24.06589\teval-rmse:557.65001\n",
            "[150]\ttrain-rmse:21.18185\teval-rmse:555.87692\n",
            "[200]\ttrain-rmse:19.25953\teval-rmse:549.33981\n",
            "[220]\ttrain-rmse:18.73237\teval-rmse:549.28390\n",
            "📈 XGBoost 模型评估: R² = -1.7853, RMSE = 549.29 USD\n",
            "📊 基于 XGBoost (DMatrix) 合理性监控：\n",
            "今日现价: 3040.00 USD\n",
            "模型合理价格: 1863.79 USD\n",
            "偏离百分比: 63.11%\n",
            "系统建议: ⚠ 当前价格偏高，建议谨慎或逢高减仓。\n"
          ]
        }
      ],
      "source": [
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "import yfinance as yf\n",
        "from datetime import datetime\n",
        "import pandas as pd\n",
        "\n",
        "# 1️⃣ 获取多因子数据\n",
        "start_date = \"2015-01-01\"\n",
        "today = datetime.today().strftime('%Y-%m-%d')\n",
        "\n",
        "# 下载历史数据\n",
        "gc = yf.download('GC=F', start=start_date, end=today)[['Close']].rename(columns={'Close': 'GC=F'})\n",
        "dxy = yf.download('DX-Y.NYB', start=start_date, end=today)[['Close']].rename(columns={'Close': 'DXY'})\n",
        "vix = yf.download('^VIX', start=start_date, end=today)[['Close']].rename(columns={'Close': 'VIX'})\n",
        "sp500 = yf.download('^GSPC', start=start_date, end=today)[['Close']].rename(columns={'Close': 'SP500'})\n",
        "tip = yf.download('TIP', start=start_date, end=today)[['Close']].rename(columns={'Close': 'TIP'})  # CPI Proxy\n",
        "\n",
        "# 合并成多因子 DataFrame\n",
        "data = gc.join([tip, dxy, vix, sp500], how='inner').dropna()\n",
        "# 数据分割\n",
        "X = data[['TIP', 'DXY', 'VIX', 'SP500']]\n",
        "X.columns = ['TIP', 'DXY', 'VIX', 'SP500']  # 保证列名干净\n",
        "y = data['GC=F']\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, shuffle=False)\n",
        "\n",
        "# 创建 DMatrix\n",
        "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
        "dval = xgb.DMatrix(X_val, label=y_val)\n",
        "\n",
        "# 参数\n",
        "params = {\n",
        "    'objective': 'reg:squarederror',\n",
        "    'learning_rate': 0.05,\n",
        "    'max_depth': 4,\n",
        "    'eval_metric': 'rmse'\n",
        "}\n",
        "\n",
        "# 模型训练\n",
        "evals = [(dtrain, 'train'), (dval, 'eval')]\n",
        "xgb_model = xgb.train(params, dtrain, num_boost_round=500, evals=evals,\n",
        "                      early_stopping_rounds=20, verbose_eval=50)\n",
        "\n",
        "# 模型评估\n",
        "dval_pred = xgb_model.predict(dval)\n",
        "r2 = r2_score(y_val, dval_pred)\n",
        "rmse = mean_squared_error(y_val, dval_pred) ** 0.5\n",
        "print(f\"📈 XGBoost 模型评估: R² = {r2:.4f}, RMSE = {rmse:.2f} USD\")\n",
        "\n",
        "# 今日预测\n",
        "latest_factors = pd.DataFrame({\n",
        "    'TIP': [tip.iloc[-1, 0]],\n",
        "    'DXY': [dxy.iloc[-1, 0]],\n",
        "    'VIX': [vix.iloc[-1, 0]],\n",
        "    'SP500': [sp500.iloc[-1, 0]]\n",
        "})\n",
        "latest_factors.columns = ['TIP', 'DXY', 'VIX', 'SP500']  # 列名统一\n",
        "\n",
        "latest_factors_dmatrix = xgb.DMatrix(latest_factors)\n",
        "fair_price_xgb = xgb_model.predict(latest_factors_dmatrix)[0]\n",
        "today_actual_price = gc.iloc[-1, 0]\n",
        "deviation_pct_xgb = ((today_actual_price - fair_price_xgb) / fair_price_xgb) * 100\n",
        "\n",
        "# 输出建议\n",
        "if deviation_pct_xgb > 3:\n",
        "    suggestion = \"⚠ 当前价格偏高，建议谨慎或逢高减仓。\"\n",
        "elif deviation_pct_xgb < -3:\n",
        "    suggestion = \"✅ 当前价格偏低，考虑逢低布局。\"\n",
        "else:\n",
        "    suggestion = \"✔ 当前价格合理，建议观望。\"\n",
        "\n",
        "print(\"📊 基于 XGBoost (DMatrix) 合理性监控：\")\n",
        "print(f\"今日现价: {today_actual_price:.2f} USD\")\n",
        "print(f\"模型合理价格: {fair_price_xgb:.2f} USD\")\n",
        "print(f\"偏离百分比: {deviation_pct_xgb:.2f}%\")\n",
        "print(f\"系统建议: {suggestion}\")"
      ]
    }
  ]
}